pipeline {
    agent any
    
    environment {
        GIT_TOKEN = credentials('GITOKEN')
    }

    stages {
        stage('Cleanup') {
            steps {
                echo 'Cleaning workspace...'
                deleteDir()
            }
        }

        stage('Debug environment') {
            steps {
                sh 'python3 --version'
                sh 'git --version'
                sh 'env'
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh 'python3 -m unittest discover'
                    } catch (Exception e) {
                        echo "Tests failed: ${e}"
                        currentBuild.result = 'FAILURE'
                        error("Failing build due to test errors")
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Tests passed. Merging dev into master.'
            sh '''
                git config user.email "fake@ci.local"
                git config user.name "Jenkins"
                git remote set-url origin https://${GIT_TOKEN}@github.com/clementDA/CI_RPG.git
                git checkout master
                git merge --allow-unrelated-histories origin/dev
                git push origin master
            '''
        }
        failure {
            echo 'Tests failed. Moving commit to failures branch.'
            sh '''
                git config user.email "fake@ci.local"
                git config user.name "Jenkins"
                git remote set-url origin https://${GIT_TOKEN}@github.com/clementDA/CI_RPG.git
                
                # Récupérer la dernière version de dev
                git fetch origin dev
                
                # Rebaser la branche locale dev sur origin/dev proprement
                git checkout dev
                git reset --hard origin/dev
                
                # Afficher l’état du repo pour debug
                git status
                git branch
                git log -3 --oneline
                
                # Créer et basculer sur la branche failures avec numéro de build
                git checkout -b failures/${BUILD_NUMBER}
                
                # Pousser la nouvelle branche failures
                git push origin failures/${BUILD_NUMBER}
            '''
        }
    }
}
